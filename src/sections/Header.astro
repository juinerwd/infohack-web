---
export interface Props {
  currentPath?: string;
}

const { currentPath = "" } = Astro.props;

const navItems = [
  { name: "Noticias", href: "/news", icon: "📰" },
  { name: "Guías", href: "/guides", icon: "🛡️" },
  { name: "Recursos externos", href: "/external-resources", icon: "🛡️" },
  { name: "Autores/Expertos", href: "/authors-experts", icon: "🛡️" },
  { name: "Sobre nosotros", href: "/about", icon: "🛡️" },
  { name: "Contactanos", href: "/contact", icon: "🛡️" },
  // { name: "Tutoriales", href: "/tutorials", icon: "🎓" },
  { name: "Aviso ético/legal", href: "/legal", icon: "🔗" },
];

const isActive = (path: string) =>
  currentPath === path || (path !== "/" && currentPath.startsWith(path));
---

<header
  class="sticky top-0 z-50 w-full border-b bg-white/95 backdrop-blur supports-[backdrop-filter]:bg-white/60 shadow-sm"
>
  <div class="container mx-auto px-4 sm:px-6 lg:px-8">
    <div class="flex h-16 items-center justify-between">
      <!-- Logo -->
      <a
        href="/"
        class="flex items-center space-x-2 hover:opacity-80 transition-opacity"
      >
        <div class="h-8 w-8 text-green-600">
          <svg viewBox="0 0 24 24" fill="currentColor" class="w-full h-full">
            <path
              d="M12,1L3,5V11C3,16.55 6.84,21.74 12,23C17.16,21.74 21,16.55 21,11V5L12,1M12,7C13.4,7 14.8,8.6 14.8,10V11H15.5C16,11 16.5,11.4 16.5,12V16C16.5,16.6 16,17 15.5,17H8.5C8,17 7.5,16.6 7.5,16V12C7.5,11.4 8,11 8.5,11H9.2V10C9.2,8.6 10.6,7 12,7M12,8.2C11.2,8.2 10.5,8.7 10.5,10V11H13.5V10C13.5,8.7 12.8,8.2 12,8.2Z"
            ></path>
          </svg>
        </div>
        <span class="text-2xl font-bold text-slate-800">Infohack</span>
      </a>

      <!-- Desktop Navigation -->
      <nav class="hidden lg:flex items-center space-x-8">
        {
          navItems.map((item) => (
            <a
              href={item.href}
              class={`text-slate-600 hover:text-green-600 transition-colors font-medium ${
                isActive(item.href) ? "text-green-600" : ""
              }`}
            >
              {item.name}
            </a>
          ))
        }
      </nav>

      <!-- Desktop Actions -->
      <div class="hidden lg:flex items-center space-x-4">
        <!-- Theme toggle placeholder -->
        <button
          id="theme-toggle"
          class="p-2 rounded-lg text-slate-600 hover:text-slate-900 hover:bg-slate-100 transition-colors"
          title="Cambiar tema"
        >
          <svg class="w-5 h-5" fill="currentColor" viewBox="0 0 24 24">
            <path
              d="M12 2.25a.75.75 0 01.75.75v2.25a.75.75 0 01-1.5 0V3a.75.75 0 01.75-.75zM7.5 12a4.5 4.5 0 119 0 4.5 4.5 0 01-9 0zM18.894 6.166a.75.75 0 00-1.06-1.06l-1.591 1.59a.75.75 0 101.06 1.061l1.591-1.59zM21.75 12a.75.75 0 01-.75.75h-2.25a.75.75 0 010-1.5H21a.75.75 0 01.75.75zM17.834 18.894a.75.75 0 001.06-1.06l-1.59-1.591a.75.75 0 10-1.061 1.06l1.59 1.591zM12 18a.75.75 0 01.75.75V21a.75.75 0 01-1.5 0v-2.25A.75.75 0 0112 18zM7.758 17.303a.75.75 0 00-1.061-1.06l-1.591 1.59a.75.75 0 001.06 1.061l1.591-1.59zM6 12a.75.75 0 01-.75.75H3a.75.75 0 010-1.5h2.25A.75.75 0 016 12zM6.697 7.757a.75.75 0 001.06-1.06l-1.59-1.591a.75.75 0 00-1.061 1.06l1.59 1.591z"
            ></path>
          </svg>
        </button>
      </div>

      <!-- Mobile menu button -->
      <button
        id="mobile-menu-button"
        class="lg:hidden p-2 rounded-lg text-slate-600 hover:text-slate-900 hover:bg-slate-100 transition-colors"
        aria-label="Abrir menú"
      >
        <svg
          id="menu-icon"
          class="w-6 h-6"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M4 6h16M4 12h16M4 18h16"></path>
        </svg>
        <svg
          id="close-icon"
          class="w-6 h-6 hidden"
          fill="none"
          stroke="currentColor"
          viewBox="0 0 24 24"
        >
          <path
            stroke-linecap="round"
            stroke-linejoin="round"
            stroke-width="2"
            d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>

    <!-- Mobile menu -->
    <div
      id="mobile-menu"
      class="lg:hidden hidden border-t bg-white/95 backdrop-blur"
    >
      <div class="py-4">
        <nav class="flex flex-col space-y-4">
          {
            navItems.map((item) => (
              <a
                href={item.href}
                class={`text-slate-600 hover:text-green-600 transition-colors font-medium px-4 py-2 ${
                  isActive(item.href)
                    ? "text-green-600 bg-green-50 rounded-lg mx-2"
                    : ""
                }`}
              >
                <span class="mr-2">{item.icon}</span>
                {item.name}
              </a>
            ))
          }

          <!-- Mobile CTA -->
          <!-- <div class="px-4 pt-4">
            <a
              href="/guides"
              class="block w-full text-center bg-green-600 text-white px-4 py-3 rounded-lg hover:bg-green-700 transition-colors font-medium shadow-sm"
            >
              Comenzar
            </a>
          </div> -->
        </nav>
      </div>
    </div>
  </div>
</header>

<script>
  // Mobile menu toggle
  document.addEventListener("DOMContentLoaded", () => {
    const button = document.getElementById("mobile-menu-button");
    const menu = document.getElementById("mobile-menu");
    const menuIcon = document.getElementById("menu-icon");
    const closeIcon = document.getElementById("close-icon");

    if (button && menu && menuIcon && closeIcon) {
      button.addEventListener("click", () => {
        const isOpen = !menu.classList.contains("hidden");

        if (isOpen) {
          menu.classList.add("hidden");
          menuIcon.classList.remove("hidden");
          closeIcon.classList.add("hidden");
        } else {
          menu.classList.remove("hidden");
          menuIcon.classList.add("hidden");
          closeIcon.classList.remove("hidden");
        }
      });

      // Close menu when clicking outside
      document.addEventListener("click", (e) => {
        if (
          !button.contains(e.target as Node) &&
          !menu.contains(e.target as Node)
        ) {
          menu.classList.add("hidden");
          menuIcon.classList.remove("hidden");
          closeIcon.classList.add("hidden");
        }
      });
    }

    // Theme toggle placeholder (basic implementation)
    const themeToggle = document.getElementById("theme-toggle");
    if (themeToggle) {
      themeToggle.addEventListener("click", () => {
        // Placeholder for theme functionality
        console.log("Theme toggle clicked - implement dark/light mode here");

        // Simple visual feedback
        themeToggle.style.transform = "scale(0.95)";
        setTimeout(() => {
          themeToggle.style.transform = "scale(1)";
        }, 150);
      });
    }
  });

  // Add scroll effect to header
  let lastScrollY = window.scrollY;

  window.addEventListener("scroll", () => {
    const header = document.querySelector("header");
    if (header) {
      if (window.scrollY > lastScrollY && window.scrollY > 100) {
        // Scrolling down
        header.style.transform = "translateY(-100%)";
      } else {
        // Scrolling up
        header.style.transform = "translateY(0)";
      }
      lastScrollY = window.scrollY;
    }
  });
</script>

<style>
  header {
    transition: transform 0.3s ease-in-out;
  }

  /* Backdrop blur support */
  @supports (backdrop-filter: blur(10px)) {
    header {
      backdrop-filter: blur(10px);
    }
  }

  /* Smooth transitions for mobile menu */
  #mobile-menu {
    transition:
      opacity 0.2s ease-in-out,
      transform 0.2s ease-in-out;
  }

  /* Button hover effects */
  button {
    transition: all 0.2s ease-in-out;
  }

  button:active {
    transform: scale(0.95);
  }
</style>
