---
export interface Props {
  showTitle?: boolean;
  className?: string;
}

const { showTitle = true, className = "" } = Astro.props;
---

<div>
  {showTitle && (
    <div class="mb-6">
      <h3 class="text-2xl font-bold text-slate-800 mb-2">üîê Generador de Contrase√±as</h3>
      <p class="text-gray-600">Crea contrase√±as seguras y personalizadas para proteger tus cuentas.</p>
    </div>
  )}

  <!-- Generated Password Display -->
  <div class="mb-6">
    <label class="block text-sm font-semibold text-gray-700 mb-2">
      Contrase√±a generada
    </label>
    <div class="flex items-center space-x-2">
      <input 
        type="text" 
        id="generated-password"
        readonly
        class="flex-1 bg-gray-50 border border-gray-300 rounded-lg px-4 py-3 font-mono text-lg focus:ring-2 focus:ring-green-500 focus:border-green-500"
        placeholder="Haz clic en 'Generar' para crear una contrase√±a"
      />
      <button 
        id="copy-password-btn"
        class="bg-green-600 hover:bg-green-700 text-white px-4 py-3 rounded-lg font-medium transition-colors disabled:opacity-50 disabled:cursor-not-allowed"
        title="Copiar contrase√±a"
      >
        üìã
      </button>
      <button 
        id="generate-password-btn"
        class="bg-blue-600 hover:bg-blue-700 text-white px-6 py-3 rounded-lg font-medium transition-colors"
      >
        üîÑ Generar
      </button>
    </div>
    
    <!-- Password Strength Indicator -->
    <div class="mt-3">
      <div class="flex items-center justify-between mb-1">
        <span class="text-sm text-gray-600">Fuerza de la contrase√±a</span>
        <span id="strength-text" class="text-sm font-medium">-</span>
      </div>
      <div class="w-full bg-gray-200 rounded-full h-2">
        <div id="strength-bar" class="h-2 rounded-full transition-all duration-300" style="width: 0%"></div>
      </div>
    </div>
  </div>

  <!-- Options Grid -->
  <div class="grid md:grid-cols-2 gap-6">
    
    <!-- Length Control -->
    <div class="space-y-4">
      <h4 class="font-semibold text-gray-800">üìè Longitud</h4>
      
      <div>
        <div class="flex items-center justify-between mb-2">
          <label class="text-sm text-gray-600">Caracteres</label>
          <span id="length-display" class="text-sm font-mono bg-gray-100 px-2 py-1 rounded">16</span>
        </div>
        <input 
          type="range" 
          id="length-slider"
          min="8" 
          max="128" 
          value="16"
          class="w-full h-2 bg-gray-200 rounded-lg appearance-none cursor-pointer slider"
        />
        <div class="flex justify-between text-xs text-gray-500 mt-1">
          <span>8</span>
          <span>128</span>
        </div>
      </div>
    </div>

    <!-- Character Options -->
    <div class="space-y-4">
      <h4 class="font-semibold text-gray-800">üî§ Caracteres a incluir</h4>
      
      <div class="space-y-3">
        <label class="flex items-center space-x-3 cursor-pointer">
          <input type="checkbox" id="include-uppercase" checked class="checkbox">
          <span class="text-sm">May√∫sculas (A-Z)</span>
          <span class="text-xs text-gray-500 font-mono">ABCDEFGH...</span>
        </label>
        
        <label class="flex items-center space-x-3 cursor-pointer">
          <input type="checkbox" id="include-lowercase" checked class="checkbox">
          <span class="text-sm">Min√∫sculas (a-z)</span>
          <span class="text-xs text-gray-500 font-mono">abcdefgh...</span>
        </label>
        
        <label class="flex items-center space-x-3 cursor-pointer">
          <input type="checkbox" id="include-numbers" checked class="checkbox">
          <span class="text-sm">N√∫meros (0-9)</span>
          <span class="text-xs text-gray-500 font-mono">0123456789</span>
        </label>
        
        <label class="flex items-center space-x-3 cursor-pointer">
          <input type="checkbox" id="include-symbols" checked class="checkbox">
          <span class="text-sm">S√≠mbolos</span>
          <span class="text-xs text-gray-500 font-mono">!@#$%^&*...</span>
        </label>
        
        <label class="flex items-center space-x-3 cursor-pointer">
          <input type="checkbox" id="exclude-ambiguous" checked class="checkbox">
          <span class="text-sm">Excluir ambiguos</span>
          <span class="text-xs text-gray-500">Evita: 0, O, l, I, 1</span>
        </label>
      </div>
    </div>
  </div>

  <!-- Quick Templates -->
  <div class="mt-6 pt-6 border-t border-gray-200">
    <h4 class="font-semibold text-gray-800 mb-3">‚ö° Plantillas r√°pidas</h4>
    <div class="flex flex-wrap gap-2">
      <button class="template-btn bg-gray-100 hover:bg-gray-200 text-gray-700 px-3 py-2 rounded-md text-sm transition-colors" data-template="basic">
        üìù B√°sica (12 chars)
      </button>
      <button class="template-btn bg-gray-100 hover:bg-gray-200 text-gray-700 px-3 py-2 rounded-md text-sm transition-colors" data-template="strong">
        üîí Fuerte (16 chars)
      </button>
      <button class="template-btn bg-gray-100 hover:bg-gray-200 text-gray-700 px-3 py-2 rounded-md text-sm transition-colors" data-template="ultra">
        üõ°Ô∏è Ultra-segura (24 chars)
      </button>
      <button class="template-btn bg-gray-100 hover:bg-gray-200 text-gray-700 px-3 py-2 rounded-md text-sm transition-colors" data-template="pin">
        üì± PIN (6 n√∫meros)
      </button>
    </div>
  </div>
</div>

<script is:inline>
document.addEventListener('DOMContentLoaded', function() {
  const passwordInput = document.getElementById('generated-password');
  const copyBtn = document.getElementById('copy-password-btn');
  const generateBtn = document.getElementById('generate-password-btn');
  const lengthSlider = document.getElementById('length-slider');
  const lengthDisplay = document.getElementById('length-display');
  const strengthBar = document.getElementById('strength-bar');
  const strengthText = document.getElementById('strength-text');
  const multipleContainer = document.getElementById('multiple-passwords');
  const generateMultipleBtn = document.getElementById('generate-multiple-btn');

  // Character sets
  const charSets = {
    uppercase: 'ABCDEFGHIJKLMNOPQRSTUVWXYZ',
    lowercase: 'abcdefghijklmnopqrstuvwxyz', 
    numbers: '0123456789',
    symbols: '!@#$%^&*()_+-=[]{}|;:,.<>?',
    ambiguous: '0Ol1I'
  };

  // Update length display
  lengthSlider?.addEventListener('input', function() {
    if (lengthDisplay) lengthDisplay.textContent = this.value;
  });

  // Generate password function
  function generatePassword() {
    const length = parseInt(lengthSlider?.value || '16');
    let charset = '';
    
    // Build character set based on options
    if (document.getElementById('include-uppercase')?.checked) {
      charset += charSets.uppercase;
    }
    if (document.getElementById('include-lowercase')?.checked) {
      charset += charSets.lowercase;
    }
    if (document.getElementById('include-numbers')?.checked) {
      charset += charSets.numbers;
    }
    if (document.getElementById('include-symbols')?.checked) {
      charset += charSets.symbols;
    }
    
    // Remove ambiguous characters if selected
    if (document.getElementById('exclude-ambiguous')?.checked) {
      for (let char of charSets.ambiguous) {
        charset = charset.replace(new RegExp(char, 'g'), '');
      }
    }
    
    if (!charset) {
      alert('Debes seleccionar al menos un tipo de car√°cter');
      return '';
    }
    
    // Generate password
    let password = '';
    for (let i = 0; i < length; i++) {
      password += charset.charAt(Math.floor(Math.random() * charset.length));
    }
    
    return password;
  }

  // Calculate password strength
  function calculateStrength(password) {
    let score = 0;
    const checks = {
      length: password.length >= 12,
      uppercase: /[A-Z]/.test(password),
      lowercase: /[a-z]/.test(password),
      numbers: /\d/.test(password),
      symbols: /[^A-Za-z0-9]/.test(password),
      longLength: password.length >= 16
    };
    
    Object.values(checks).forEach(check => {
      if (check) score += 1;
    });
    
    const percentage = (score / 6) * 100;
    let strength = 'Muy d√©bil';
    let color = '#ef4444';
    
    if (percentage >= 83) {
      strength = 'Muy fuerte';
      color = '#22c55e';
    } else if (percentage >= 66) {
      strength = 'Fuerte';
      color = '#84cc16';
    } else if (percentage >= 50) {
      strength = 'Media';
      color = '#eab308';
    } else if (percentage >= 33) {
      strength = 'D√©bil';
      color = '#f97316';
    }
    
    return { percentage, strength, color };
  }

  // Update password display and strength
  function updatePassword() {
    const password = generatePassword();
    if (password && passwordInput) {
      passwordInput.value = password;
      
      const strength = calculateStrength(password);
      if (strengthBar) {
        strengthBar.style.width = strength.percentage + '%';
        strengthBar.style.backgroundColor = strength.color;
      }
      if (strengthText) {
        strengthText.textContent = strength.strength;
        strengthText.style.color = strength.color;
      }
    }
  }

  // Copy to clipboard
  copyBtn?.addEventListener('click', function() {
    if (passwordInput && passwordInput.value) {
      navigator.clipboard.writeText(passwordInput.value).then(function() {
        copyBtn.textContent = '‚úÖ';
        setTimeout(function() {
          copyBtn.textContent = 'üìã';
        }, 2000);
      }).catch(function() {
        // Fallback for older browsers
        passwordInput.select();
        document.execCommand('copy');
        copyBtn.textContent = '‚úÖ';
        setTimeout(function() {
          copyBtn.textContent = 'üìã';
        }, 2000);
      });
    }
  });

  // Generate button
  generateBtn?.addEventListener('click', updatePassword);

  // Template buttons
  document.querySelectorAll('.template-btn').forEach(function(btn) {
    btn.addEventListener('click', function() {
      const template = this.getAttribute('data-template');
      
      // Reset all checkboxes
      document.getElementById('include-uppercase').checked = true;
      document.getElementById('include-lowercase').checked = true;
      document.getElementById('include-numbers').checked = true;
      document.getElementById('include-symbols').checked = false;
      document.getElementById('exclude-ambiguous').checked = true;
      
      switch(template) {
        case 'basic':
          lengthSlider.value = '12';
          break;
        case 'strong':
          lengthSlider.value = '16';
          document.getElementById('include-symbols').checked = true;
          break;
        case 'ultra':
          lengthSlider.value = '24';
          document.getElementById('include-symbols').checked = true;
          break;
        case 'pin':
          lengthSlider.value = '6';
          document.getElementById('include-uppercase').checked = false;
          document.getElementById('include-lowercase').checked = false;
          document.getElementById('include-symbols').checked = false;
          break;
      }
      
      lengthDisplay.textContent = lengthSlider.value;
      updatePassword();
    });
  });

  // Generate multiple passwords
  generateMultipleBtn?.addEventListener('click', function() {
    if (multipleContainer) {
      multipleContainer.innerHTML = '';
      
      for (let i = 0; i < 5; i++) {
        const password = generatePassword();
        const div = document.createElement('div');
        div.className = 'flex items-center justify-between bg-gray-50 rounded-lg px-3 py-2';
        div.innerHTML = `
          <span class="font-mono text-sm flex-1">${password}</span>
          <button class="copy-multiple-btn text-xs bg-green-500 hover:bg-green-600 text-white px-2 py-1 rounded" data-password="${password}">
            üìã
          </button>
        `;
        multipleContainer.appendChild(div);
      }
      
      multipleContainer.classList.remove('hidden');
      
      // Add copy functionality to multiple passwords
      document.querySelectorAll('.copy-multiple-btn').forEach(function(btn) {
        btn.addEventListener('click', function() {
          const password = this.getAttribute('data-password');
          navigator.clipboard.writeText(password).then(function() {
            btn.textContent = '‚úÖ';
            setTimeout(function() {
              btn.textContent = 'üìã';
            }, 2000);
          });
        });
      });
    }
  });

  // Generate initial password
  updatePassword();
});
</script>

<style>
  .checkbox {
    width: 1rem;
    height: 1rem;
    border-radius: 0.25rem;
    border: 1px solid #d1d5db;
  }
  
  .checkbox:checked {
    background-color: #10b981;
    border-color: #10b981;
  }
  
  .slider::-webkit-slider-thumb {
    appearance: none;
    height: 1rem;
    width: 1rem;
    border-radius: 50%;
    background: #10b981;
    cursor: pointer;
  }
  
  .slider::-moz-range-thumb {
    height: 1rem;
    width: 1rem;
    border-radius: 50%;
    background: #10b981;
    cursor: pointer;
    border: none;
  }
</style>
